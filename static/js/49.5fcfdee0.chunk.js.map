{"version":3,"file":"static/js/49.5fcfdee0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieDetails/movie-details.module.css?79a2","components/MovieDetails/MovieDetails.jsx","webpack://react-homework-template/./src/pages/MovieDetailsPage/movie-details-page.module.css?2076","pages/MovieDetailsPage/MovieDetailsPage.jsx","shared/services/movies-search-api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"filmInfoTitle\":\"movie-details_filmInfoTitle__lRjXP\",\"filmInfoWrapper\":\"movie-details_filmInfoWrapper__VOPEC\",\"detailsWrapper\":\"movie-details_detailsWrapper__nCudX\"};","import PropTypes from 'prop-types';\n\nimport defaultImg from 'shared/images/default-movie.jpg';\n\nimport css from './movie-details.module.css';\n\nconst MovieDetails = ({ movieInfo }) => {\n  return (\n    <div className={css.detailsWrapper}>\n      {movieInfo && (\n        <div>\n          <h2>{movieInfo.original_title}</h2>\n          <div className=\"wrapper\">\n            <img\n              src={\n                movieInfo.poster_path\n                  ? `https://image.tmdb.org/t/p/w200${movieInfo.poster_path}`\n                  : defaultImg\n              }\n              alt=\"\"\n            />\n            <div className={css.filmInfoWrapper}>\n              <p>\n                <span className={css.filmInfoTitle}>number of views - </span>\n                {movieInfo.popularity}\n              </p>\n              <p>\n                <span className={css.filmInfoTitle}>number of votes - </span>\n                {movieInfo.vote_count}\n              </p>\n              <p>\n                <span className={css.filmInfoTitle}>rating - </span>\n                {movieInfo.vote_average}\n              </p>\n              <p>\n                <span className={css.filmInfoTitle}>genres - </span>\n                {movieInfo.genres.map(({ name }) => name).join(', ')}\n              </p>\n              <p>\n                <span className={css.filmInfoTitle}>duration - </span>\n                {movieInfo.runtime} minutes\n              </p>\n            </div>\n          </div>\n          <p>\n            <span className={css.filmInfoTitle}>Overview - </span>\n            {movieInfo.overview}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  movieInfo: PropTypes.shape({\n    original_title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    popularity: PropTypes.number.isRequired,\n    vote_count: PropTypes.number.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ),\n    overview: PropTypes.string.isRequired,\n    runtime: PropTypes.number.isRequired,\n  }),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"navigationBtn\":\"movie-details-page_navigationBtn__MiOxg\"};","import { useParams, useLocation, useNavigate, Outlet } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { TailSpin } from 'react-loader-spinner';\nimport { Link } from 'react-router-dom';\n\nimport MovieDetails from 'components/MovieDetails/MovieDetails';\n\nimport css from './movie-details-page.module.css';\n\nimport { fetchMovieById } from 'shared/services/movies-search-api';\n\nconst MovieDetailsPage = () => {\n  const [movieDetails, setMovieDetails] = useState();\n  const [error, setError] = useState();\n  const [isLoading, setIsLoading] = useState();\n\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMovieById(movieId);\n        setMovieDetails(data);\n      } catch ({ message }) {\n        setError(message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <TailSpin width=\"50\" color=\"black\" wrapperClass=\"spinner\" />\n      )}\n\n      <button\n        className={css.navigationBtn}\n        onClick={() => navigate(location.state?.from || '/')}\n        type=\"button\"\n      >\n        Go back\n      </button>\n      <MovieDetails movieInfo={movieDetails} />\n      <ul>\n        <li>\n          <Link to=\"cast\" state={{ from: location }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: location }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Outlet />\n\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a1735b4b403b356dec5f0993d9adcd8f',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const fetchMoviesByName = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data;\n};\n"],"names":["movieInfo","className","css","original_title","src","poster_path","defaultImg","alt","popularity","vote_count","vote_average","genres","map","name","join","runtime","overview","useState","movieDetails","setMovieDetails","error","setError","isLoading","setIsLoading","movieId","useParams","location","useLocation","navigate","useNavigate","useEffect","fetchMovieDetails","fetchMovieById","data","message","width","color","wrapperClass","onClick","state","from","type","to","instance","axios","baseURL","params","api_key","fetchTrendingMovies","get","id","fetchMoviesByName","query","fetchMovieReviews","fetchMovieCast"],"sourceRoot":""}