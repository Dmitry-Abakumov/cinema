{"version":3,"file":"static/js/999.03fe5f25.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesPageForm/movies-page-form.module.css?e286","components/MoviesPageForm/MoviesPageForm.jsx","pages/MoviesPage/MoviesPage.jsx","shared/components/Movies/Movies.jsx","shared/services/movies-search-api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"movies-page-form_form__XjwUU\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from './movies-page-form.module.css';\n\nconst MoviesPageForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n\n    if (query.trim() !== '') {\n      onSubmit(query);\n    }\n\n    setQuery('');\n  };\n\n  const onChange = ({ target }) => {\n    setQuery(target.value);\n  };\n\n  return (\n    <form onSubmit={onFormSubmit} className={css.form}>\n      <input onChange={onChange} type=\"text\" value={query} />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default MoviesPageForm;\n\nMoviesPageForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { TailSpin } from 'react-loader-spinner';\n\nimport Movies from 'shared/components/Movies/Movies';\nimport MoviesPageForm from 'components/MoviesPageForm/MoviesPageForm';\n\nimport { fetchMoviesByName } from 'shared/services/movies-search-api';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const searchMovieByName = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchMoviesByName(query);\n        setMovies(results);\n      } catch ({ message }) {\n        setError(message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    searchMovieByName();\n  }, [query]);\n\n  return (\n    <>\n      {isLoading && (\n        <TailSpin width=\"50\" color=\"black\" wrapperClass=\"spinner\" />\n      )}\n\n      <MoviesPageForm onSubmit={onSubmit} />\n      <Movies movies={movies} />\n\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Movies = ({ movies }) => {\n  const location = useLocation();\n\n  const moviesList = movies.map(\n    ({ id, title, belongs_to_collection: name }) => (\n      <li key={id}>\n        <Link to={`/movies/${id}`} state={{ from: location }}>\n          {title || name}\n        </Link>\n      </li>\n    )\n  );\n\n  return (\n    <div className=\"wrapper\">\n      <ul>{moviesList}</ul>\n    </div>\n  );\n};\n\nexport default Movies;\n\nMovies.defaultProps = {\n  movies: [],\n};\n\nMovies.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      belongs_to_collection: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      }),\n    })\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a1735b4b403b356dec5f0993d9adcd8f',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const fetchMoviesByName = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data;\n};\n"],"names":["onSubmit","useState","query","setQuery","e","preventDefault","trim","className","css","onChange","target","value","type","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","searchMovieByName","fetchMoviesByName","results","message","width","color","wrapperClass","Movies","location","useLocation","moviesList","map","id","title","name","belongs_to_collection","to","state","from","defaultProps","instance","axios","baseURL","params","api_key","fetchTrendingMovies","data","fetchMovieById","fetchMovieReviews","fetchMovieCast"],"sourceRoot":""}