{"version":3,"file":"static/js/153.2689eb19.chunk.js","mappings":"8OACA,EAAuB,4BAAvB,EAA2D,6B,SCuC3D,EA9BsB,WACpB,OAA0CA,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAa,GAFS,UAGHG,EAAAA,EAAAA,MAHG,OAGhBC,EAHgB,OAItBN,EAAiBM,EAAKC,SAJA,qDAKbC,QACTC,EAAAA,GAAAA,MAAY,sDANU,yBAQtBP,GAAa,GARS,4EAAH,qDAYvBE,GACD,GAAE,KAGD,iBAAKM,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,4BACCV,IAAa,SAAC,KAAD,CAAUW,MAAM,KAAKC,MAAM,OAAOC,aAAa,aAE7D,SAACC,EAAA,EAAD,CAAQC,OAAQjB,MAGrB,C,yFCrCD,EAA6B,2BAA7B,EAA+D,qBAA/D,EAA0F,oBAA1F,EAAqH,qBAArH,EAAyJ,6BAAzJ,EAA8L,sB,SCKxLgB,EAAS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIJ,GAEZ,IAAMK,EAAaL,EAAOM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OAC5B,eAAIhB,UAAWC,EAAf,UACE,UAAC,KAAD,CACED,UAAWC,EACXgB,GAAE,kBAAaJ,GACfK,MAAO,CAAEC,KAAMZ,GAHjB,WAKE,gBACEP,UAAWC,EACXmB,IACEL,EAAW,yCAC2BA,GAClCM,EAENC,IAAI,YAEN,iBAAKtB,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,SAAyBa,KACzB,cAAGd,UAAWC,EAAd,iCAA0Ce,EAAaO,WACrD,IACA,eAnBuBV,EADH,IA2B9B,OAAO,eAAIb,UAAWC,EAAf,SAAgCU,GACxC,EAED,IAEAN,EAAOmB,aAAe,CACpBlB,OAAQ,G,wLCzCJmB,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAlC,EAAmB,mCAAG,sGACV8B,EAASK,IAAI,uBADH,uBACzBlC,EADyB,EACzBA,KADyB,kBAG1BA,GAH0B,2CAAH,qDAMnBmC,EAAc,mCAAG,WAAMlB,GAAN,yFACLY,EAASK,IAAT,iBAAuBjB,IADlB,uBACpBjB,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,sDAMdoC,EAAiB,mCAAG,WAAMC,GAAN,yFACRR,EAASK,IAAI,gBAAiB,CACnDF,OAAQ,CACNK,MAAAA,KAH2B,uBACvBrC,EADuB,EACvBA,KADuB,kBAOxBA,GAPwB,2CAAH,sDAUjBsC,EAAiB,mCAAG,WAAMrB,GAAN,yFACRY,EAASK,IAAT,iBAAuBjB,EAAvB,aADQ,uBACvBjB,EADuB,EACvBA,KADuB,kBAGxBA,GAHwB,2CAAH,sDAMjBuC,EAAc,mCAAG,WAAMtB,GAAN,yFACLY,EAASK,IAAT,iBAAuBjB,EAAvB,aADK,uBACpBjB,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,qD","sources":["webpack://cinema/./src/pages/HitMoviesPage/HitMoviesPage.module.css?69b2","pages/HitMoviesPage/HitMoviesPage.jsx","webpack://cinema/./src/shared/components/Movies/Movies.module.css?269d","shared/components/Movies/Movies.jsx","shared/services/movies-search-api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"HitMoviesPage_wrap__VKoQU\",\"title\":\"HitMoviesPage_title__+5VyO\"};","import { useEffect, useState } from 'react';\nimport { TailSpin } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\n\nimport Movies from 'shared/components/Movies/Movies';\n\nimport { fetchTrendingMovies } from 'shared/services/movies-search-api';\n\nimport css from './HitMoviesPage.module.css';\n\nconst HitMoviesPage = () => {\n  const [initialMovies, setInitialMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchInitialFilms = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchTrendingMovies();\n        setInitialMovies(data.results);\n      } catch ({ message }) {\n        toast.error('Oops, something went wrong. Try reloading the page');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInitialFilms();\n  }, []);\n\n  return (\n    <div className={css.wrap}>\n      <h2 className={css.title}>Trending today</h2>\n      {isLoading && <TailSpin width=\"50\" color=\"#fff\" wrapperClass=\"spinner\" />}\n\n      <Movies movies={initialMovies} />\n    </div>\n  );\n};\n\nexport default HitMoviesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesWrap\":\"Movies_moviesWrap__3msCr\",\"link\":\"Movies_link__A7qle\",\"img\":\"Movies_img__-7pxA\",\"text\":\"Movies_text__zkjiS\",\"filmInfoWrap\":\"Movies_filmInfoWrap__I3kog\",\"movie\":\"Movies_movie__8oebh\"};","import { Link, useLocation } from 'react-router-dom';\n\nimport defaultPoster from 'shared/images/default-movie.jpg';\n\nimport css from './Movies.module.css';\n\nconst Movies = ({ movies }) => {\n  const location = useLocation();\n  console.log(movies);\n\n  const moviesList = movies.map(({ id, title, poster_path, release_date }) => (\n    <li className={css.movie} key={id}>\n      <Link\n        className={css.link}\n        to={`/movies/${id}`}\n        state={{ from: location }}\n      >\n        <img\n          className={css.img}\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : defaultPoster\n          }\n          alt=\"poster\"\n        />\n        <div className={css.filmInfoWrap}>\n          <p className={css.text}>{title}</p>\n          <p className={css.text}>{`Release data: ${release_date.replaceAll(\n            '-',\n            '.'\n          )}`}</p>\n        </div>\n      </Link>\n    </li>\n  ));\n\n  return <ul className={css.moviesWrap}>{moviesList}</ul>;\n};\n\nexport default Movies;\n\nMovies.defaultProps = {\n  movies: [],\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a1735b4b403b356dec5f0993d9adcd8f',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const fetchMoviesByName = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data;\n};\n"],"names":["useState","initialMovies","setInitialMovies","isLoading","setIsLoading","useEffect","fetchInitialFilms","fetchTrendingMovies","data","results","message","toast","className","css","width","color","wrapperClass","Movies","movies","location","useLocation","console","log","moviesList","map","id","title","poster_path","release_date","to","state","from","src","defaultPoster","alt","replaceAll","defaultProps","instance","axios","baseURL","params","api_key","get","fetchMovieById","fetchMoviesByName","query","fetchMovieReviews","fetchMovieCast"],"sourceRoot":""}